%!PS-Adobe-2.0 EPSF-2.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 8
%%For: (Kirk S Fielding) (Sun Microsystems, Inc.)
%%Title: (rmexample.eps)
%%CreationDate: (6/6/03) (10:17 AM)
%%BoundingBox: 19 -318 344 -37
%%HiResBoundingBox: 19.7134 -317.875 343.4014 -37.7339
%%DocumentProcessColors: Black
%%DocumentFonts: Courier
%%+ Helvetica
%%DocumentNeededFonts: Courier
%%+ Helvetica
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_typography_AI5 1.0 1
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%%AI5_FileFormat 4.0
%%BeginPreview: 324 280 1 280
% FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000040000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000040004000000000000000000000000000000000000010
% 800000000000000000000000000000000000007BCE6000000000000000000000000000000000000010
% 8000000000000000000000000000000000000040104000000000000000000000000000000000000010
% 800000000000000000000000000000000000004A224000000000000000000000000000000000000010
% 8000000000000000000000000000000000000049567000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000015555555555555555555500003555555555555555555560000D55555555555555555558000010
% 8000010000000000000000000080002000000000000000000020000800000000000000000008000010
% 8000010000000000000000000000000000000000000000000020000800000000000000000008000010
% 8000010000000000000000000080002000000000000000000020000800000000000000000008000010
% 8000010000000000000000000000000000000000000000000020000800000000000000000108000010
% 8000010000002000000000880080002000000000000000000020000800000000000000000008000010
% 8000010051000001110248080000000000010090181100000020000807101111911003401108000010
% 8000010042212000680200880080002000001A00000A200000200008301082C8A2C800200808000010
% 8000010040000000400000000000000000001000000000000020000810101000000000000008000010
% 80000100608A2009298B2C820080002000024A200A208E0000200008B398A2884288018A2388000010
% 8000010040000000000000000000000000000000000000000020000800000000000000000008000010
% 8000010060000000000000000080002000000000180000000020000806180000000003000008000010
% 8000010000000000000000000000000000000000000000000020000800000000000000000008000010
% 8000010000000000000000000080002000000000000000000020000800000000000000000008000010
% 800001FFFFFFFFFFFFFFFFFFFF00003FFFFFFFFFFFFFFFFFFFE0000FFFFFFFFFFFFFFFFFFFF8000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 800000000000000FF00000000000000000000001FC00000000000000000000007F0000000000000010
% 800000000000000FE00000000000000000000001FC00000000000000000000007F0000000000000010
% 8000000000000007E00000000000000000000001F800000000000000000000003E0000000000000010
% 8000000000000003C00000000000000000000000F000000000000000000000001E0000000000000010
% 80000000000000018000000000000000000000006000000000000000000000001C0000000000000010
% 8000000000000000000000000000000000000000200000000000000000000000080000000000000010
% 800001FFFFFFFFFFFFFFFFFFFF00003FFFFFFFFFFFFFFFFFFFE0000FFFFFFFFFFFFFFFFFFFF8000010
% 8000010000000000000000000080002000000000000000000020000800000000000000000008000010
% 8000010000000000000000000000000000000000000000000020000800000000000000000008000010
% 8000010000000000000000000080002000000000000000000020000800000000000000000008000010
% 8000010000000000000000000000000000000000000000000020000800000000000000000008000010
% 8000010000002280200000000080002000000080100000000020000800000326010000000008000010
% 8000010000000401A73380000000000000001141D319C00000200008000001201D319C000008000010
% 8000010000002382214A0000008000200000014010A200000020000800000018010A20000008000010
% 80000100000000402731800000000000000001C01399C000002000080000000201399C000008000010
% 800001000000244229480000008000200000022014A420000020000800000022014A42000008000010
% 8000010000000383AF3380000000000000000221D79DC000002000080000001C1D79DC000008000010
% 8000010000000000000000000080002000000000000000000020000800000000000000000008000010
% 8000010000000000000000000000000000000000000000000020000800000000000000000008000010
% 8000010000000000000000000080002000000000000000000020000800000000000000000008000010
% 8000015555555555555555555500003555555555555555555560000D55555555555555555558000010
% 8000000000000001800000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 800000000000000FF00000000000000000000003FC00000000000000000000007F8000000000000010
% 8000000000000007E00000000000000000000001F800000000000000000000003F0000000000000010
% 8000000000000003C00000000000000000000000F800000000000000000000003E0000000000000010
% 80000000000000018000000000000000000000007000000000000000000000001C0000000000000010
% 8000000000000001800000000000000000000000200000000000000000000000080000000000000010
% 8000015555555555555555555500001555555555555555555540000555555555555555555550000010
% 8000010000000000000000000080002000000000000000000020000800000000000000000008000010
% 8000010000000000000000000000000000000000000000000020000800000000000000000008000010
% 8000010000000000000000000080002000000000000000000020000800000000000000000008000010
% 8000010000000000000000000000000000000000000000000020000800000000000000000008000010
% 8000010000000000000000880080002000000000000008000020000800000000000002000008000010
% 8000010051404001110248080000000000010090181108000020000800000318030213000008000010
% 80000100420B0000680200880080002000001A000042C800002000080000320002106A000008000010
% 8000010040400000400000000000000000001000000000000020000800001200020200000008000010
% 80000100628A2009298B2C820080002000024A200AB08A00002000080000B38A039A21800008000010
% 8000010040000000000000000000000000000000000000000020000800000000000000000008000010
% 8000010060000000000000000080002000000000180000000020000800000218020000000008000010
% 8000010000000000000000000000000000000000000000000020000800000000000000000008000010
% 8000010000000000000000000080002000000000000000000020000800000000000000000008000010
% 8000010000000000000000000000000000000000000000000020000800000000000000000008000010
% 800001FFFFFFFFFFFFFFFFFFFF80003FFFFFFFFFFFFFFFFFFFE0000FFFFFFFFFFFFFFFFFFFF8000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000000000200000000000000000000000080000000000000010
% 8000000000000001000000000000000000007FFFFFFFE0000000000000000FFFFFFFFC000000000010
% 8000000000000001000000000000000000004000000020000000000000000800000004000000000010
% 8000000000000001000000000000000000004000000020000000000000000800000004000000000010
% 800000000000000FF0000000000000000003F8000001FE00000000000000FF0000003F800000000010
% 8000000000000007E0000000000000000001F8000001FC000000000000007F0000003F000000000010
% 8000000000000003C0000000000000000001F0000000F8000000000000003E0000003F000000000010
% 8000000000000003C0000000000000000000F000000070000000000000003C0000001E000000000010
% 800000000000000180000000000000000000600000003000000000000000180000000C000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000001FFFFFF000000000000006739CE40339CE720000000000FFFFFF806E7B9EC000000010
% 8000000000001000001000000000000004000004000000020000000000000000004000004000000010
% 8000000000001000000000000000000000000000000000020000000000800000800000000000000010
% 8000000000001000001000000000000000000000000000000000000000000000000000000000000010
% 800000000000008A288000000000000004228A2002194D12000000000088A288800653440000000010
% 8000000000001002289000000000000004008A24001045120000000000002288004011444000000010
% 8000000000001002E8900000000000000400BA20022069120000000000802E8880081A444000000010
% 8000000000001002089000000000000000008220000041120000000000002088000010444000000010
% 800000000000108A08800000000000000022822000114110000000000088A088800450440000000010
% 80000000000010720710000000000000041C81C0000E40E00000000000072070004390380000000010
% 8000000000001000000000000000000004000004020000020000000000800000804000004000000010
% 8000000000001000001000000000000004000004000000020000000000000000004000004000000010
% 800000000000080000100000000000000000000400000002000000000080000080000000C000000010
% 8000000000000555555000000000000001445114004411040000000000555555001144510000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 80000000000000000055555555555555555555C0000000000000000055555555555555555555400010
% 8000000000000000008000000000000000000000000000000000000040000000000000000000000010
% 8000000000000000000000000000000000000040000000000000000040000000000000000000400010
% 8000000000000000008000000000000000000040000000000000000040000000000000000000400010
% 8000000000000000000000002000000000000040000000000000000040000000000000400000400010
% 8000000000000000008000002000000000000040000000000000000040000080000000000000000010
% 800000000000000000000000250091100000004000000000000000004000008700D100000000400010
% 800000000000000000800000240080A200000040000000000000000040000080000840000000000010
% 8000000000000000000000002400800000000040000000000000000040000000000000000000400010
% 800000000000000000800000A600A208E000000000000000000000004000002380628AE00000000010
% 8000000000000000000000000000000000000040000000000000000040000000000000000000400010
% 800000000000000000800000000080000000004000000000000000004000000600C000000000400010
% 8000000000000000000000000000000000000040000000000000000040000000000000000000400010
% 8000000000000000008000000000000000000040000000000000000040000000000000000000000010
% 8000000000000000007FFFFFFFFFFFFFFFFFFFC000000000000000007FFFFFFFFFFFFFFFFFFFC00010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000007F8000000000000000000000000000000000003F800000000000010
% 8000000000000000000000000003F8000000000000000000000000000000000003F800000000000010
% 8000000000000000000000000001F0000000000000000000000000000000000001F000000000000010
% 8000000000000000000000000001E0000000000000000000000000000000000000E000000000000010
% 8000000000000000000000000000C00000000000000000000000000000000000006000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000007FFFFFFFFFFFFFFFFFFFC000000000000000007FFFFFFFFFFFFFFFFFFFC00010
% 8000000000000000008000000000000000000000000000000000000040000000000000000000000010
% 8000000000000000000000000000000000000040000000000000000040000000000000000000400010
% 8000000000000000008000000000000000000040000000000000000040000000000000000000400010
% 8000000000000000000000000000000000000040000000000000000040000000000000000000400010
% 8000000000000000008000020924020000000040000000000000000040000008A00800000000000010
% 80000000000000000000000200001873980000400000000000000000400000010069DCE00000400010
% 800000000000000000800003CE38260A20000040000000000000000040000008E08852800000000010
% 80000000000000000000000201042071980000400000000000000000400000001009CC600000400010
% 80000000000000000080000208A2268824000000000000000000000040000009108A52000000000010
% 800000000000000000000002071C186B9C000040000000000000000040000000E0EBCCE00000400010
% 8000000000000000008000000000000000000040000000000000000040000000000000000000400010
% 8000000000000000000000000000000000000040000000000000000040000000000000000000400010
% 8000000000000000008000000000000000000040000000000000000040000000000000000000000010
% 80000000000000000055555555555555555555C0000000000000000055555555555555555555400010
% 8000000000000000000000000000C00000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000007F8000000000000000000000000000000000003F800000000000010
% 8000000000000000000000000003F0000000000000000000000000000000000001F800000000000010
% 8000000000000000000000000001E0000000000000000000000000000000000000F000000000000010
% 8000000000000000000000000000C0000000000000000000000000000000000000E000000000000010
% 8000000000000000000000000000C00000000000000000000000000000000000004000000000000010
% 8000000000000000005555555555555555555500000000000000000055555555555555555555400010
% 8000000000000000008000000000000000000080000000000000000040000000000000000000400010
% 8000000000000000000000000000000000000040000000000000000040000000000000000000400010
% 8000000000000000008000000000000000000040000000000000000040000000000000000000400010
% 8000000000000000000000002000000000000040000000000000000040000000000000000000400010
% 8000000000000000008000002000000080000040000000000000000040000080000000800000000010
% 800000000000000000000000250091108000004000000000000000004000008700D180800000400010
% 8000000000000000008000002400842C80000040000000000000000040000080000A1A800000000010
% 8000000000000000000000002400800000000040000000000000000040000000000010000000400010
% 800000000000000000800000A600AB08A000000000000000000000004000002380628A200000000010
% 8000000000000000000000000000000000000040000000000000000040000000000000000000400010
% 800000000000000000800000000080000000004000000000000000004000000600C000000000400010
% 8000000000000000000000000000000000000040000000000000000040000000000000000000400010
% 8000000000000000008000000000000000000040000000000000000040000000000000000000000010
% 8000000000000000000000000000000000000040000000000000000040000000000000000000400010
% 8000000000000000003BBBBBBBBBFBBBBBBBBB8000000000000000003BBBBBBBBBFBBBBBBBBB800010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000400000000000000000000000000000000000004000000000000010
% 8000000000000000000000000000C00000000000000000000000000000000000004000000000000010
% 80000003FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000007FFFFFFFE00000000010
% 8000000200000001000000008000000040000000200000001000000000000040000000200000000010
% 8000000200000001000000008000000040000000200000001000000000000040000000200000000010
% 8000001FE000000FE0000007F8000003F8000001FE000000FE000000000007F8000003FC0000000010
% 8000001FC000000FE0000007F0000003F8000001FC000000FE000000000003F0000001FC0000000010
% 8000000F80000007C0000003E0000001F0000000F80000007C000000000001F0000000F80000000010
% 800000070000000380000001C0000000E00000007000000038000000000001E0000000700000000010
% 80000003000000018000000080000000E00000002000000038000000000000C0000000600000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 80003FFFFFE01FFFFFF00FFFFFF807FFFFFC0339CE72019CE73900000006AAAAA802AAAAAE00000010
% 8000200000201000001008000008040000040200000201000001000000040000040000000000000010
% 8000200000201000001008000008040000040000000200000001000000040000040200000200000010
% 8000200000201000001008000008040000040000000000000000000000040000040000000000000010
% 80002128A02010924090084A28080424902402128A02010924080000000065344402228A2200000010
% 80002200012011001010088000080441100402200012011001010000000401144400008A2000000010
% 8000220FA0201102C0900883E8080440B0240220FA0201102C090000000081A4440200BA2200000010
% 8000220000201100001008800008044000040020000200100001000000040104440000822000000010
% 80002228022011080810088A0088044202040022802000108080000000004504400222822200000010
% 800021C01C2010F4071008700708043C01C4021C01C0010F407100000004390384001C81C000000010
% 8000200000201000001008000008040000040200000201000001000000040000040200000200000010
% 8000200000201000001008000008040000040200000201000001000000040000040000000000000010
% 80002AAAAAA01AAAAAB00AAAAAA806AAAAAC0082208A0022088300000006AAAAAC02AAAAAE00000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% 8000000000000000000000000000000000000000000000000000000000000000000000000000000010
% FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0
%%EndPreview
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 131071 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 182.834 -230.166 182.834 -230.166
%AI3_TileBox: -114.167 -581.166 477.833 156.834
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -133.666 21.334 1.5 1018 725 18 1 1 3 40 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-114.167 -581.166
%%AI3_PaperRect:-9 783 603 -9
%%AI3_Margin:9 -40 -9 9
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI7_Thumbnail: 128 112 8
%%BeginData: 9618 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD7F7D527DFD7EA87D7DFD7EA87D7DFD3BA87DFD42A87D7DFD3BA8
%7D7DA87DA87DA852FD3BA87D7DFD3BA852FD047D527D7D7DFD3AA87D7DFD
%7EA87D7DFD7EA87D7DFD7EA87D7DFD09A87DA87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DFD07A852A87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7DFD07A87D7DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA852FD08
%A87D7DFD08A87DFD09FFA8FD05FFA8FFFFFF7DFD0BFF7DFD07A8FD08FFA8
%FD0DFFA8FD07FFFD09A8FD1DFFFD0AA87D7DFD09A8FFFFA8A8A8FF7DFF7D
%FF7DFFFFFFA87DA8A87DA8A87DA8A8FFA8FF7DA8FFFF7DFD06A87DFD07FF
%A87DA87DA8A8FFFF7DA8FFA8A8FF7DFF7DFD06FFFD09A8FFA852A87DA8FF
%FF7DFF7DA87D7D7DFFA8A87DA8FFA87DFFFD04A8FFA87DFD08A87D7DFD09
%A8FFFFA87DFFFD05A87DFFFFFFA87D7D7DA8A8A827A87DFF7DFF7DFFFFFF
%7DFD07A8FD07FFA87DA87D7DFFFFFF7D7DFF7DFD04A87DFD06FFFD09A8FF
%FD057DFFA87D7D7DA87D7DFFFF7D7D7DA8FF7DA8A8A87DFFA8FF7DFD09A8
%7D7DFD09A8FFFF7DA8FD07FFA87DFD12FF7DFD06A87DFD0DFF7DA852FD0E
%FFFD09A8FFFF7DFF7DFD0EFFA87D7DA8FD07FF7DFD08A87D7DFD09A8FD1F
%FF7DFD07A8FD1EFF7DFD07A87DFD1EFFFD09A87D7DFD09A87DA87DA87DA8
%7DA87DA87DA87DA87D7D7DA87DA87DA87DA87DA87DA87DA87DFD07A87DA8
%7DA87DA87DA87DA87DA87DA87DA852A87DA87DA87DA87DA87DA87DA87DFD
%09A87DA87DA87DA87DA87DA87DA87DA852A87DA87DA87DA87DA87DA87DA8
%7DA87DFD08A87D7DFD18A87DFD26A87DFD25A87DFD18A87D7DFD18A87DFD
%26A87DFD25A87DFD18A87D7DFD18A87DFD26A87DFD25A87DFD18A87D7DFD
%18A87DFD26A87DFD25A87DFD18A87D7DFD16A87DF8F852FD23A87DF8F852
%FD23A852F8F87DFD16A87D7DFD17A85227FD25A85227FD25A82752FD17A8
%7D7DFD08A87DA87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8
%A87DA8A8A87DA87DFD06A87DA8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A8
%7DA8A8A87DA8A8A87DA8A8A87DFD07A87DA8A8A87DA8A8A87DA8A8A87DA8
%A8A87DA8A8A87DA8A8A87DA8A8A87DA8A87DFD08A87D7DFD09A8FD08FFA8
%7DA8FF7DA8FFFFA8FD0EFF7DFD06A87DFD0AFFA8A8FD12FFFD09A8FD08FF
%7DA8FFA87DFFFFFFA8FD0DFF7DFD08A87D7DFD09A8FD09FF7DFFA8A8A8FF
%7D7DA8277D7DA8FD09FF7DFD07A8FD0AFF7DA8A8FF7DFF7D277DA87DFD09
%FFFD09A8FD08FFA8FFFF7DA8FFA87DA87D7DA87DA8FD08FFFD09A87D7DFD
%09A8FD09FFA8FFA87DA8FFA87DA8527D7DA8FD09FFFD07A87DFD0AFFA87D
%A8FF7DA8A8527DA87DFD09FFFD09A8FD08FF7DFFFF7D7DFFA8A87D7D7DA8
%7DA8FD08FF7DFD08A87D7DFD08A87DFD1FFF7DFD07A8FD1EFFFD09A8FD1E
%FFFD09A87D7DFD09A8FD1FFF7DFD06A87DFD1EFFFD09A8FD1EFF7DFD08A8
%7D7DFD18A87DFD26A87DFD25A87DFD18A87D7DFD18A87DFD26A87DFD25A8
%7DFD18A87D7DFD18A87DFD26A87DFD25A87DFD18A87D7DFD18A87DFD26A8
%7DFD25A87DFD18A87D7DFD16A87D7D52FD25A87D7D7DFD23A87D7D7DFD17
%A87D7DFD17A8F8F852FD23A87DF8F87DFD23A87DF8F87DFD16A87D7DFD17
%A87D52FD25A8527DFD25A87D7DFD17A87D7DFD08A87D7DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7DFD06A852A87D
%A87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D7DFD
%07A87D7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87D
%A87DA852FD08A87D7DFD09A8FD0FFFA8FFFFFF7DFD0BFF7DFD07A8FD08FF
%A8FD15FFFD09A8FD1EFFFD09A87D7DFD09A8FFFFA8A8A8FF7DFF7DA87DFF
%FFFFA87DA8A87DA8A87DA8A8FFA8FF7DA8FFFF7DFD06A87DFD07FFA87DA8
%7DA8A8FFFF7DA8FFA8A8FF7DA87DFD06FFFD09A8FD08FF52FD04A8FFFFA8
%A8FF7DA8A8A87DA8FD06FF7DFD08A87D7DFD09A8FFFFA8A8A87D7DA87DA8
%A8FFFFFFA87D7D7DA8A8A827A87DFF7DFF7DA8FFFF7DFD07A8FD07FFA87D
%A8527DFFFFFF7D7DFF52A8A87DA8A8FD06FF7DFD07A87DFD07FF7D277D7D
%7DA8FFFF7DA8FFFD047DA87DFD06FFFD09A87D7DFD09A8FFFF7DFD08FFA8
%7DFD12FF7DFD06A87DFD0DFF7DA852FD0EFFFD09A8FD08FF7DFF7DA8FFA8
%7D7DFD0EFF7DFD08A87D7DFD08A87DFD1FA87DFD06A87DFD1EA87DFD07A8
%7DFD1EA87DFD08A87D7DFD18A87DFD26A87DFD25A87DFD18A87D7DFD18A8
%7DFD26A87DFD25A87DFD18A87D7DFD18A87DFD26A87DFD25A87DFD18A87D
%7DFD18A87DFD1FA8FD0E7DFD19A8FD0E7DFD11A87D7DFD16A87D525252FD
%1DA8525252FD0AA85227527DFD15A87D522752FD0AA8525252FD10A87D7D
%FD17A827F8FD1EA852F852FD0AA852F827FD17A827F852FD0AA852F852FD
%10A87D7DFD13A8FD047D52FD057DFD16A87DA87DA87D527DA87DA87DA8A8
%A8FD047D27FD047DFD11A8FD047D27FD047DA8A8A87DA87DA852527DA87D
%A87DFD0CA87D7DFD14A8FD08FFFD17A8FD0AFFA8A8A87DFD09FF7DFD0FA8
%7DFD09FF7DA8A8FD0AFFFD0DA87D7DFD13A87DFFFD04A87DA8FFFD17A87D
%FFFD04A87DA8FFFF7DA8A8A8FFFFFD05A8FFFD12A8FFFF7DA87DA8A8FFFD
%04A87DFFFD04A87DA8FFFF7DFD0CA87D7DFD14A8FFA8FFFF527DA8FF52FD
%17A8FFA8FFFF7DA87DFF7DA8A8A87DFFFFA8FFA8A8A8FFA87DFD0FA87DFF
%7DFFFF7D52A8FFA87DA8A8A8FFA8FFFF527DA8FF7DFD0DA87D7DFD13A87D
%FFA8A87DA8FFA87D7DFD16A87DFFA8A87DA8FFA87DA87DA8A87DFFFF7DA8
%7DFFA8A8A8FFFD10A8FFA87DA87DFFA8A8A87DA8A87DFFA8A87DA8FFA87D
%A87DFD0CA87D7DFD13A87DFD08A87DFD18A8FFA8FFA8FFA8FFFD04A87DFD
%09A87DFD0FA87DFD09A87DFD04A8FFA8FFA8FFA8FFFD0EA87D7DFD7EA87D
%7DFD7EA87D7DFD7EA87D7DFD7EA87D7DFD7EA87D7DFD7EA87D7DFD7EA87D
%7DFD58A87DFD1EA87DFD06A87D7DFD1BA87DFD09FFA8FD0CFFA8FD08FF7D
%FD1DA8FD15FFA8FD08FF7DFD06A87D7DFD1CA8FD09FFA852A8FFFFA8A8FF
%FF7DFFA8FF7DFD08FFFD1EA8FD08FFA852A8FFFFFFA8A8FFA8FFA8FF7DFD
%08FFFD07A87D7DFD1BA87DFD09FF7D7D7DFFFFA87DFD04A87D7D7DA8FD07
%FF7DFD1DA8FD08FFA8A87DA8FFFF7D7DFFFD057DA8FD07FF7DFD06A87D7D
%FD1CA8FD0CFFA8A87DFD10FFFD1EA8FD09FF7DFFA8A8A87DFD0FFFFD07A8
%7D7DFD1BA852A87DA87DA87DA87DA87DA87DA87DA852A87DA87DA87DA87D
%A87DA87DA87DA852FD1CA87D7DA87DA87DA87DA87DA87DA87DA852A87DA8
%7DA87DA87DA87DA87DA87DA852FD06A87D7DFD2BA87DFD3BA87DFD16A87D
%7DFD2BA87DFD3BA87DFD16A87D7DFD2BA87DFD3BA87DFD16A87D7DFD2BA8
%7DFD3BA87DFD16A87D7DFD2AA8525252FD39A87D52527DFD14A87D7DFD2A
%A852F852FD39A87DF8277DFD14A87D7DFD1BA8FF7DA87DA87DA87DA87DA8
%7DA87DA87D527DA87DA87DA87DA87DA87DA87DA87DFFFD1CA87DA87DA87D
%A87DA87DA87DA87DA87D7D52A87DA87DA87DA87DA87DA87DA87DFD07A87D
%7DFD1BA87DFD1FFF7DFD1DA8FD1EFF7DFD06A87D7DFD1CA8FD08FFFD07A8
%FFFFFFA8FD0CFFFD1DA87DFD08FFA8A8FFA8A8A8FD10FFFD07A87D7DFD1B
%A87DFD08FF7D7DA87DA87DA8FFA87DA8527DA87DA8FD07FF7DFD1DA8FD08
%FF7DFFFFA87DFFA87D7D7D52A852FD09FF7DFD06A87D7DFD1CA8FD08FF7D
%FFA8A87DA87DFFA8A8A87D7DA87DA8FD07FFFD1EA8FD08FFA8FFFFFD04A8
%7DA8FD047DA8FD08FFFD07A87D7DFD1BA87DFD1FFF7DFD1DA8FD1EFF7DFD
%06A87D7DFD1EA87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8
%A87DA8A8A87DFD1DA87DA87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8
%A87DA8A8A87DA8A8A87D7DFD06A87D7DFD2BA87DFD3BA87DFD16A87D7DFD
%2BA87DFD3BA87DFD16A87D7DFD2BA87DFD3BA87DFD16A87D7DFD2BA87DFD
%3BA87DFD16A87D7DFD2AA827F8277DFD38A852F82752FD14A87D7DFD2AA8
%7DF852FD3AA82727FD15A87D7DFD1BA87DA87DA87DA87DA87DA87DA87DA8
%7DA852A87DA87DA87DA87DA87DA87DA87DA87DFD1CA87D7DA87DA87DA87D
%A87DA87DA87DA852A87DA87DA87DA87DA87DA87DA87DA852FD06A87D7DFD
%1CA8FD0AFFA8FD14FFFD1EA8FD1EFFFD07A87D7DFD1BA87DFD09FFA87DA8
%FFFFA87DFFA87DFFA8A87DA8FD07FF7DFD1DA8FD08FF7D7D7DFFFFFF7DA8
%FFFD04A87DA8FD07FF7DFD06A87D7DFD1CA8FD09FFA87DA8FFFF7DA8A8A8
%7DFF7D7D7DFD08FFFD1EA8FD08FFA87DA8A8FFFF7D7DFF7DA87D7D7DFD08
%FFFD07A87D7DFD1BA87DFD0DFF7D7DA8FD0FFF7DFD1DA8FD09FFA8A8FF7D
%A87DFD0FFF7DFD06A87D7DFD1CA8FD1FFFFD1DA87DFD1EFFFD07A87D7DFD
%1BA87DA87DA87DA87DA87DA87DA87DA87DA852A87DA87DA87DA87DA87DA8
%7DA87DA87DFD1CA87D7DA87DA87DA87DA87DA87DA87DA852A87DA87DA87D
%A87DA87DA87DA87DA87DFD06A87D7DFD2BA87DFD3BA87DFD16A87D7DFD2B
%A87DFD3BA87DFD16A87D7DFD0BA8FD417DFD16A8FD0D7DFD0FA87D7DFD0A
%A87DFD0CA87DFD0DA87DFD0CA87DFD0CA87DFD0CA87DFD14A87DFD0CA87D
%FD0FA87D7DFD09A87D27277DFD09A87D27277DFD09A87D272752FD09A87D
%27277DFD0AA8272752FD09A87D27277DFD12A8F8F827FD09A87D27F827FD
%0EA87D7DFD0AA82727FD0BA82727FD0BA82727FD0BA82727FD0BA852F8FD
%0BA827277DFD12A87DF87DFD0AA852F87DFD0EA87D7DFD06A87DA87DA87D
%A87DA87DFD05A87DA87DA87DA87DA87DA8A8A87DA87DA87DA87DA87DFD05
%A87DA87DA87DA87DA87DA8A8A87DFF7DFF7DFF7DFF7DFD05A87DA87DA852
%A87DA87DFD0BA87DA87DA87DA87DA87DA87DA8A8A87DA87DA87DA87DA87D
%FD0BA87D7DFD07A8FFA87DFF7D7DA8FF7DA8A8A87DFFA8A8FF7D7DFFFD06
%A8FFFF7DA87D7DA8A87DA8A8A87DFFA8A8A87D7DA8FFFD04A8FFFFFF7DFF
%7D7DA8FF7DA8A8A87DFFA8A8A87D7DFFFFFD0DA8FFFF7DA87D7DA8FFA87D
%A8A87DFFA8A8A87D7DA8FFFF7DFD0AA87D7DFD07A8FF7DFFFF7D7DFD07A8
%FFA8FFFF7D7DFD07A8FFA8FFFF7D7DA87DFD05A8FFA8FFFF7D7D7DFF7DFD
%04A8FF7DFFFF7D7DA8FF7DFD04A8FFA8FFFF7D7DA8FF7DFD0BA87DFFA8FF
%FF7D7DA8FFA87DA8A8A8FFA8FFFF7D7D7DFFFD0CA87D7DFD07A8FF7D7DFF
%7DFF7DA87DA8A8A87DFF7DA8A8A8FFA87DFD05A8FFA87DA87DFF7D7D7DA8
%A8A87DFFA8A87DA8FFA87D7DA8A8A8FFFFA87DA87DFFA8A87DA8A8A87DFF
%A8A87DA8FFA87D7DFD0CA8FFA87DA87DFFFD06A87DFFA8A87DA8FFA87DA8
%7DFD0AA87D7DFD06A87DFD08FFFD05A8FD08FFFD05A8FD08FFFD05A8FD08
%FF7DA8A8A87DFD08FFFD05A8FD08FFFD0CA87DFD09FF7DA8A8A8FD09FFFD
%0BA87D7DFD06A87D7DA87DA87DA87DA852A8A8A852A87DA87DA87DA87DFD
%05A87DA87DA87DA87DA87DA8A8A852A87DA87DA87DA87D7DFD04A87DFF7D
%A87DFF7DA87DA8A8A87DFD08A87DFD0CA87DA87DA87DA87DA87D7DA8A87D
%A87DA87DA87DA87DA87DFD0AA87D7DFD7EA87D7DFD7EA87D7DFD7EA87D7D
%FD7EA87D7DFD7EA87D7DFD7EA8FD807D52FD7FFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(6/10/1996) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 68 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/havefont
{
	systemdict /languagelevel known
		{
		/Font resourcestatus dup
			{ exch pop exch pop }
		if
		}
		{
		systemdict /FontDirectory get 1 index known
			{ pop true }
			{
			systemdict /fileposition known
				{
				dup length 6 add exch
				Ss 6 250 getinterval
				cvs pop
				Ss exch 0 exch getinterval
				status
					{ pop pop pop pop true }
					{ false }
				ifelse
				}
				{
				pop false
				}
			ifelse
			}
		ifelse
		}
	ifelse
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
/subststring {
	exch 2 index exch search
	{
		exch pop
		exch dup () eq
		{
			pop exch concatstring
		}
		{
			3 -1 roll
			exch concatstring
			concatstring
		} ifelse
		exch pop true
	}
	{
		pop pop false
	} ifelse
} def
/concatstring {
	1 index length 1 index length
	1 index add
	string
	dup 0 5 index putinterval
	dup 2 index 4 index putinterval
	4 1 roll pop pop pop
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	2 index havefont
	{
		3 index
		255 string
		cvs
		
		dup
		(_Symbol_)
		eq
		{
			pop
			2 index
			findfont
			
		}
		{
			1 index 0 eq
			{
				dup length 1 sub
				1 exch
				getinterval
				
				cvn
				findfont
			}
			{
				pop 2 index findfont
			} ifelse
		} ifelse
	}
	{
		dup 1 eq
		{
			2 index 64 string cvs
			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring
			{
				exch pop dup havefont
				{
					findfont false
				}
				{
					pop true
				} ifelse
			}
			{
				pop	dup
				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring
				{
					exch pop dup havefont
					{
						findfont false
					}
					{
						pop true
					} ifelse
				}
				{
					pop pop true
				} ifelse
			} ifelse
			{
				1 index 1 eq
				{
					/Ryumin-Light-Ext-RKSJ-V havefont
					{/Ryumin-Light-Ext-RKSJ-V}
					{/Courier}
					ifelse
				}
				{
					/Ryumin-Light-83pv-RKSJ-H havefont
					{/Ryumin-Light-83pv-RKSJ-H}
					{/Courier}
					ifelse
				} ifelse
				findfont
				[1 0 0.5 1 0 0] makefont
			} if
		}
		{
			/Courier findfont
		} ifelse
	} ifelse
	_wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 10 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontScript exch def
	/FontDirection exch def
	/FontRequest exch def
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
W B
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
W F 
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
W S
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat
	_shift aload pop _lineorientation 1 eq { exch } if translate
	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	1 index type /nametype eq
	{
		dup 0.75 mul 1 index 0.25 mul neg
	} if
	/_fontDescent exch ddef
	/_fontAscent exch ddef
	/_fontSize exch ddef
	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef
	/_fontHeight _fontSize ddef
	findfont _fontSize scalefont setfont
} def
/Tl
{
	pop neg 0 exch
	_leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	0 exch
	_shift astore pop
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	count 1 eq { 100 } if
	100 div exch 100 div exch
	_scale astore pop
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Tg
{
	pop
} def
/TG
{
	pop
} def
/Tv
{
	/_lineorientation exch ddef
} def
/TV
{
	/_charorientation exch ddef
} def
/Ty
{
	dup /_yokoorientation exch ddef 1 sub neg Tv
} def
/TY
{
	pop
} def
/T~
{
	Tx
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	_fontSize mul 1000 div
	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse
	rmoveto
	pop
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	Td
} def
/T*-
{
	_leading aload pop
	_lineorientation 0 ne { exch } if
	exch neg exch neg
	Td
} def
/T-
{
	_ax neg 0 rmoveto
	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ findfont _fontSize scalefont setfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%
/X^
{
	currentfont 5 1 roll
	dup havefont
		{
		findfont _fontSize scalefont setfont
		}
		{
		pop
		exch
		} ifelse
	2 index 0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	pop	pop
	setfont
} def
/T^	/X^	load def
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Courier
%%IncludeFont: Helvetica
userdict /_useSmoothShade false put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
TE
%AI55J_Tsume: None
%AI3_BeginEncoding: _Courier Courier
[/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI55J_Tsume: None
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 0 TZ
%AI3_EndEncoding TrueType
[161/degree 173/notequal 176/infinity/plusminus/lessequal/greaterequal
181/mu/partialdiff/summation/product/pi/integral 189/Omega 
195/radical 197/approxequal 198/Delta 214/divide/lozenge 240/apple
/_Symbol_/Symbol 0 0 0 TZ
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Undo New Calligraphic Brush) (Calligraphic Brush Tool)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
1 Ap
0 O
0.8 g
0 R
0 G
800 Ar
0 J 0 j 0.5 w 4 M []0 d
%AI3_Note:
0 D
0 XR
343.1514 -317.625 m
19.9634 -317.625 L
19.9634 -37.9839 L
343.1514 -37.9839 L
343.1514 -317.625 L
b
0 Ap
1 w
-8008.6665 -0.1201 m
8374.334 -0.1201 L
(N) *
0.5674 7961.333 m
0.5674 -8421.666 L
(N) *
360.5684 7961.333 m
360.5684 -8421.666 L
(N) *
-8008.6665 -360.1357 m
8374.334 -360.1357 L
(N) *
8374.334 -115.1509 m
(N) *
-8008.6665 -115.1509 m
(N) *
u
u
1 Ap
0 O
1 g
0 R
0 G
0.5 w
123.4141 -76.1816 m
43.0786 -76.1816 L
43.0786 -61.7856 L
123.4141 -61.7856 L
123.4141 -76.1816 L
b
0 To
1 0 0 1 83.251 -71.2861 0 Tp
0 Tv
TP
-32.3995 0 Td
0 Tr
0 g
1 w
%_ 0 50 XQ
/_Courier 9 7.2269 -2.2409 Tf
0 Ts
100 100 Tz
0 Tt
%_0 0 100 100 Xu
%AI55J_GlyphSubst: GlyphSubstNone 
0 TA
%_ 0 XL
0 TY
0 TV
36 0 Xb
XB
0 0 5 TC
100 100 200 TW
25 TG
0 0 0 Ti
1 Ta
0 1 2 2 3 Th
0 Tq
240 Tg
10 0 Tl
0 Tc
0 Tw
(pool_default) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w
123.4141 -108.5864 m
43.0786 -108.5864 L
43.0786 -94.1904 L
123.4141 -94.1904 L
123.4141 -108.5864 L
b
0 To
1 0 0 1 83.251 -104.7002 0 Tp
0 Tv
TP
-17.2529 0 Td
0 Tr
0 g
1 w
/_Helvetica 9 9 -4.0166 Tf
(TS class) Tx 
(\r) TX 
TO
U
u
u
87.0366 -88.397 m
83.2681 -93.1646 L
79.5015 -88.397 L
87.0366 -88.397 L
f
/BBAccumRotation (-10.210176) XT
U
0 R
0 G
0.5 w
83.2632 -88.7539 m
83.2632 -76.1519 l
S
/BBAccumRotation (-6.283186) XT
U
u
0 O
1 g
123.4141 -140.9868 m
43.0786 -140.9868 L
43.0786 -126.5908 L
123.4141 -126.5908 L
123.4141 -140.9868 L
b
0 To
1 0 0 1 83.251 -136.0913 0 Tp
0 Tv
TP
-32.3995 0 Td
0 Tr
0 g
1 w
/_Courier 9 7.2269 -2.2409 Tf
(pset_default) Tx 
(\r) TX 
TO
U
u
u
87.0366 -120.7974 m
83.2681 -125.5649 L
79.5015 -120.7974 L
87.0366 -120.7974 L
f
/BBAccumRotation (-10.210176) XT
U
0 R
0 G
0.5 w
83.2632 -121.1543 m
83.2632 -108.5522 l
S
/BBAccumRotation (-6.283186) XT
U
u
u
0 O
0 g
1 w
87.0366 -152.9702 m
83.2681 -157.7383 L
79.5015 -152.9702 L
87.0366 -152.9702 L
f
/BBAccumRotation (-10.210176) XT
U
0 R
0 G
0.5 w
83.2632 -153.3271 m
83.2632 -140.9683 l
S
/BBAccumRotation (-6.283186) XT
U
u
0 O
1 g
95.2368 -171.7026 m
71.2676 -171.7026 L
71.2676 -158.9976 L
95.2368 -158.9976 L
95.2368 -171.7026 L
b
0 To
1 0 0 1 83.2617 -168.498 0 Tp
0 Tv
TP
-9.501 0 Td
0 Tr
0 g
1 w
/_Helvetica 9 9 -4.0166 Tf
(CPU) Tx 
(\r) TX 
TO
U
U
u
u
1 g
0 R
0 G
0.5 w
221.7393 -76.1816 m
141.4043 -76.1816 L
141.4043 -61.7856 L
221.7393 -61.7856 L
221.7393 -76.1816 L
b
0 To
1 0 0 1 181.5767 -71.2861 0 Tp
0 Tv
TP
-21.5997 0 Td
0 Tr
0 g
1 w
/_Courier 9 7.2269 -2.2409 Tf
(dev_pool) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w
221.7393 -108.5864 m
141.4043 -108.5864 L
141.4043 -94.1904 L
221.7393 -94.1904 L
221.7393 -108.5864 L
b
0 To
1 0 0 1 181.5767 -104.7002 0 Tp
0 Tv
TP
-15.7544 0 Td
0 Tr
0 g
1 w
/_Helvetica 9 9 -4.0166 Tf
(IA class) Tx 
(\r) TX 
TO
U
u
u
185.3613 -88.397 m
181.5938 -93.1646 L
177.8271 -88.397 L
185.3613 -88.397 L
f
/BBAccumRotation (-10.210176) XT
U
0 R
0 G
0.5 w
181.5889 -88.7539 m
181.5889 -76.1519 l
S
/BBAccumRotation (-6.283186) XT
U
u
0 O
1 g
221.7393 -140.9868 m
141.4043 -140.9868 L
141.4043 -126.5908 L
221.7393 -126.5908 L
221.7393 -140.9868 L
b
0 To
1 0 0 1 181.5767 -136.0913 0 Tp
0 Tv
TP
-21.5997 0 Td
0 Tr
0 g
1 w
/_Courier 9 7.2269 -2.2409 Tf
(dev_pset) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w [3 2 3 2 3 2 ]0 d
177.105 -171.7026 m
153.1357 -171.7026 L
153.1357 -158.9976 L
177.105 -158.9976 L
177.105 -171.7026 L
b
0 To
1 0 0 1 165.1299 -168.498 0 Tp
0 Tv
TP
-9.501 0 Td
0 Tr
0 g
1 w []0 d
/_Helvetica 9 9 -4.0166 Tf
(CPU) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w [3 2 3 2 3 2 ]0 d
210.0732 -171.7026 m
186.1035 -171.7026 L
186.1035 -158.9976 L
210.0732 -158.9976 L
210.0732 -171.7026 L
b
0 To
1 0 0 1 198.0977 -168.498 0 Tp
0 Tv
TP
-9.501 0 Td
0 Tr
0 g
1 w []0 d
(CPU) Tx 
(\r) TX 
TO
U
u
u
185.3613 -120.7974 m
181.5938 -125.5649 L
177.8271 -120.7974 L
185.3613 -120.7974 L
f
/BBAccumRotation (-10.210176) XT
U
0 R
0 G
0.5 w
181.5889 -121.1543 m
181.5889 -108.5522 l
S
/BBAccumRotation (-6.283186) XT
U
u
u
181.5889 -149.9995 m
181.5889 -140.9526 l
S
/BBAccumRotation (-6.283186) XT
U
165.1206 -153.4839 m
165.1206 -149.9878 L
198.0938 -149.9878 L
198.0938 -153.4214 L
S
u
0 O
0 g
1 w
168.8896 -153.2168 m
165.1211 -157.9849 L
161.3545 -153.2168 L
168.8896 -153.2168 L
f
/BBAccumRotation (-10.210176) XT
U
u
201.8574 -153.2168 m
198.0898 -157.9849 L
194.3232 -153.2168 L
201.8574 -153.2168 L
f
/BBAccumRotation (-10.210176) XT
U
U
U
u
u
1 g
0 R
0 G
0.5 w
320.0664 -76.1816 m
239.7314 -76.1816 L
239.7314 -61.7856 L
320.0664 -61.7856 L
320.0664 -76.1816 L
b
0 To
1 0 0 1 279.9023 -71.2861 0 Tp
0 Tv
TP
-37.7994 0 Td
0 Tr
0 g
1 w
/_Courier 9 7.2269 -2.2409 Tf
(appserver_pool) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w
320.0664 -108.5864 m
239.7314 -108.5864 L
239.7314 -94.1904 L
320.0664 -94.1904 L
320.0664 -108.5864 L
b
0 To
1 0 0 1 279.9023 -104.7002 0 Tp
0 Tv
TP
-17.2529 0 Td
0 Tr
0 g
1 w
/_Helvetica 9 9 -4.0166 Tf
(TS class) Tx 
(\r) TX 
TO
U
u
u
283.6895 -88.397 m
279.9199 -93.1646 L
276.1543 -88.397 L
283.6895 -88.397 L
f
/BBAccumRotation (-10.210176) XT
U
0 R
0 G
0.5 w
279.915 -88.7539 m
279.915 -76.1519 l
S
/BBAccumRotation (-6.283186) XT
U
u
0 O
1 g
320.0664 -140.9868 m
239.7314 -140.9868 L
239.7314 -126.5908 L
320.0664 -126.5908 L
320.0664 -140.9868 L
b
0 To
1 0 0 1 279.9023 -136.0913 0 Tp
0 Tv
TP
-21.5997 0 Td
0 Tr
0 g
1 w
/_Courier 9 7.2269 -2.2409 Tf
(app_pset) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w
275.4316 -171.7026 m
251.4629 -171.7026 L
251.4629 -158.9976 L
275.4316 -158.9976 L
275.4316 -171.7026 L
b
0 To
1 0 0 1 263.4561 -168.498 0 Tp
0 Tv
TP
-9.501 0 Td
0 Tr
0 g
1 w
/_Helvetica 9 9 -4.0166 Tf
(CPU) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w [3 2 3 2 3 2 ]0 d
308.4014 -171.7026 m
284.4316 -171.7026 L
284.4316 -158.9976 L
308.4014 -158.9976 L
308.4014 -171.7026 L
b
0 To
1 0 0 1 296.4258 -168.498 0 Tp
0 Tv
TP
-9.501 0 Td
0 Tr
0 g
1 w []0 d
(CPU) Tx 
(\r) TX 
TO
U
u
u
283.6895 -120.7974 m
279.9199 -125.5649 L
276.1543 -120.7974 L
283.6895 -120.7974 L
f
/BBAccumRotation (-10.210176) XT
U
0 R
0 G
0.5 w
279.915 -121.1543 m
279.915 -108.5522 l
S
/BBAccumRotation (-6.283186) XT
U
u
u
279.915 -149.9995 m
279.915 -140.9683 l
S
/BBAccumRotation (-6.283186) XT
U
263.4482 -153.4839 m
263.4482 -149.9878 L
296.4219 -149.9878 L
296.4219 -153.4214 L
S
u
0 O
0 g
1 w
267.2168 -153.2168 m
263.4482 -157.9849 L
259.6816 -153.2168 L
267.2168 -153.2168 L
f
/BBAccumRotation (-10.210176) XT
U
u
300.1855 -153.2168 m
296.416 -157.9849 L
292.6504 -153.2168 L
300.1855 -153.2168 L
f
/BBAccumRotation (-10.210176) XT
U
U
U
u
u
1 g
0 R
0 G
0.5 w
325.1523 -204.0952 m
244.8164 -204.0952 L
244.8164 -189.6992 L
325.1523 -189.6992 L
325.1523 -204.0952 L
b
0 To
1 0 0 1 284.9893 -199.1997 0 Tp
0 Tv
TP
-18.8997 0 Td
0 Tr
0 g
1 w
/_Courier 9 7.2269 -2.2409 Tf
(tp_pool) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w
325.1523 -236.499 m
244.8164 -236.499 L
244.8164 -222.104 L
325.1523 -222.104 L
325.1523 -236.499 L
b
0 To
1 0 0 1 284.9893 -232.6143 0 Tp
0 Tv
TP
-17.2529 0 Td
0 Tr
0 g
1 w
/_Helvetica 9 9 -4.0166 Tf
(TS class) Tx 
(\r) TX 
TO
U
u
u
288.7754 -216.3101 m
285.0059 -221.0776 L
281.2393 -216.3101 L
288.7754 -216.3101 L
f
/BBAccumRotation (-10.210176) XT
U
0 R
0 G
0.5 w
285.002 -216.6675 m
285.002 -204.0654 l
S
/BBAccumRotation (-6.283186) XT
U
u
0 O
1 g
325.1523 -268.9004 m
244.8164 -268.9004 L
244.8164 -254.5059 L
325.1523 -254.5059 L
325.1523 -268.9004 L
b
0 To
1 0 0 1 284.9893 -264.0059 0 Tp
0 Tv
TP
-18.8997 0 Td
0 Tr
0 g
1 w
/_Courier 9 7.2269 -2.2409 Tf
(tp_pset) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w
280.5186 -299.6172 m
256.5479 -299.6172 L
256.5479 -286.9111 L
280.5186 -286.9111 L
280.5186 -299.6172 L
b
0 To
1 0 0 1 268.543 -296.4111 0 Tp
0 Tv
TP
-9.501 0 Td
0 Tr
0 g
1 w
/_Helvetica 9 9 -4.0166 Tf
(CPU) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w
313.4863 -299.6172 m
289.5176 -299.6172 L
289.5176 -286.9111 L
313.4863 -286.9111 L
313.4863 -299.6172 L
b
0 To
1 0 0 1 301.5107 -296.4111 0 Tp
0 Tv
TP
-9.501 0 Td
0 Tr
0 g
1 w
(CPU) Tx 
(\r) TX 
TO
U
u
u
288.7754 -248.71 m
285.0059 -253.4775 L
281.2393 -248.71 L
288.7754 -248.71 L
f
/BBAccumRotation (-10.210176) XT
U
0 R
0 G
0.5 w
285.002 -249.0684 m
285.002 -236.4658 l
S
/BBAccumRotation (-6.283186) XT
U
u
u
285.002 -277.9141 m
285.002 -268.8672 l
S
/BBAccumRotation (-6.283186) XT
U
268.5332 -281.3975 m
268.5332 -277.9023 L
301.5068 -277.9023 L
301.5068 -281.335 L
S
u
0 O
0 g
1 w
272.3018 -281.1309 m
268.5332 -285.8975 L
264.7676 -281.1309 L
272.3018 -281.1309 L
f
/BBAccumRotation (-10.210176) XT
U
u
305.2715 -281.1309 m
301.502 -285.8975 L
297.7354 -281.1309 L
305.2715 -281.1309 L
f
/BBAccumRotation (-10.210176) XT
U
U
U
u
u
1 g
0 R
0 G
0.5 w
172.5415 -204.104 m
92.2056 -204.104 L
92.2056 -189.708 L
172.5415 -189.708 L
172.5415 -204.104 L
b
0 To
1 0 0 1 132.3774 -199.2085 0 Tp
0 Tv
TP
-18.8997 0 Td
0 Tr
0 g
1 w
/_Courier 9 7.2269 -2.2409 Tf
(db_pool) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w
172.5415 -236.5098 m
92.2056 -236.5098 L
92.2056 -222.1128 L
172.5415 -222.1128 L
172.5415 -236.5098 L
b
0 To
1 0 0 1 132.3774 -232.6221 0 Tp
0 Tv
TP
-20.2544 0 Td
0 Tr
0 g
1 w
/_Helvetica 9 9 -4.0166 Tf
(FSS class) Tx 
(\r) TX 
TO
U
u
u
136.1636 -216.3198 m
132.395 -221.0874 L
128.6284 -216.3198 L
136.1636 -216.3198 L
f
/BBAccumRotation (-10.210176) XT
U
0 R
0 G
0.5 w
132.3901 -216.6763 m
132.3901 -204.0742 l
S
/BBAccumRotation (-6.283186) XT
U
u
0 O
1 g
172.5415 -268.9102 m
92.2056 -268.9102 L
92.2056 -254.5137 L
172.5415 -254.5137 L
172.5415 -268.9102 L
b
0 To
1 0 0 1 132.3774 -264.0137 0 Tp
0 Tv
TP
-18.8997 0 Td
0 Tr
0 g
1 w
/_Courier 9 7.2269 -2.2409 Tf
(db_pset) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w
61.938 -299.625 m
37.9683 -299.625 L
37.9683 -286.9189 L
61.938 -286.9189 L
61.938 -299.625 L
b
0 To
1 0 0 1 49.9624 -296.4189 0 Tp
0 Tv
TP
-9.501 0 Td
0 Tr
0 g
1 w
/_Helvetica 9 9 -4.0166 Tf
(CPU) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w
94.9067 -299.625 m
70.937 -299.625 L
70.937 -286.9189 L
94.9067 -286.9189 L
94.9067 -299.625 L
b
0 To
1 0 0 1 82.9312 -296.4189 0 Tp
0 Tv
TP
-9.501 0 Td
0 Tr
0 g
1 w
(CPU) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w
127.8911 -299.625 m
103.9214 -299.625 L
103.9214 -286.9189 L
127.8911 -286.9189 L
127.8911 -299.625 L
b
0 To
1 0 0 1 115.9155 -296.4189 0 Tp
0 Tv
TP
-9.501 0 Td
0 Tr
0 g
1 w
(CPU) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w
160.8599 -299.625 m
136.8901 -299.625 L
136.8901 -286.9189 L
160.8599 -286.9189 L
160.8599 -299.625 L
b
0 To
1 0 0 1 148.8843 -296.4189 0 Tp
0 Tv
TP
-9.501 0 Td
0 Tr
0 g
1 w
(CPU) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w [3 2 3 2 3 2 ]0 d
193.8438 -299.625 m
169.8745 -299.625 L
169.8745 -286.9189 L
193.8438 -286.9189 L
193.8438 -299.625 L
b
0 To
1 0 0 1 181.8687 -296.4189 0 Tp
0 Tv
TP
-9.501 0 Td
0 Tr
0 g
1 w []0 d
(CPU) Tx 
(\r) TX 
TO
U
u
1 g
0 R
0 G
0.5 w [3 2 3 2 3 2 ]0 d
226.8135 -299.625 m
202.8438 -299.625 L
202.8438 -286.9189 L
226.8135 -286.9189 L
226.8135 -299.625 L
b
0 To
1 0 0 1 214.8379 -296.4189 0 Tp
0 Tv
TP
-9.501 0 Td
0 Tr
0 g
1 w []0 d
(CPU) Tx 
(\r) TX 
TO
U
u
u
136.1636 -248.7197 m
132.395 -253.4883 L
128.6284 -248.7197 L
136.1636 -248.7197 L
f
/BBAccumRotation (-10.210176) XT
U
0 R
0 G
0.5 w
132.3901 -249.0762 m
132.3901 -236.4736 l
S
/BBAccumRotation (-6.283186) XT
U
u
u
132.3901 -277.9219 m
132.3901 -268.8896 l
S
/BBAccumRotation (-6.283186) XT
U
49.9595 -281.4063 m
49.9595 -277.9102 L
214.8389 -277.9102 L
214.8389 -281.3438 L
S
u
0 O
0 g
1 w
53.728 -281.1387 m
49.9595 -285.9082 L
46.1929 -281.1387 L
53.728 -281.1387 L
f
/BBAccumRotation (-10.210176) XT
U
0 R
0 G
0.5 w
82.9126 -281.4063 m
82.9126 -277.9102 L
S
u
0 O
0 g
1 w
86.6812 -281.1387 m
82.9126 -285.9082 L
79.146 -281.1387 L
86.6812 -281.1387 L
f
/BBAccumRotation (-10.210176) XT
U
0 R
0 G
0.5 w
115.897 -281.4063 m
115.897 -277.9102 L
S
u
0 O
0 g
1 w
119.6655 -281.1387 m
115.897 -285.9082 L
112.1304 -281.1387 L
119.6655 -281.1387 L
f
/BBAccumRotation (-10.210176) XT
U
0 R
0 G
0.5 w
148.8657 -281.4063 m
148.8657 -277.9102 L
S
u
0 O
0 g
1 w
152.6343 -281.1387 m
148.8657 -285.9082 L
145.0991 -281.1387 L
152.6343 -281.1387 L
f
/BBAccumRotation (-10.210176) XT
U
0 R
0 G
0.5 w
181.8501 -281.4063 m
181.8501 -277.9102 L
S
u
0 O
0 g
1 w
185.6191 -281.1387 m
181.8501 -285.9082 L
178.0835 -281.1387 L
185.6191 -281.1387 L
f
/BBAccumRotation (-10.210176) XT
U
u
218.6025 -281.1387 m
214.834 -285.9082 L
211.0664 -281.1387 L
218.6025 -281.1387 L
f
/BBAccumRotation (-10.210176) XT
U
U
U
0 To
1 0 0 1 181.561 -52.6553 0 Tp
0 Tv
TP
-10.7998 0 Td
0 Tr
/_Courier 9 7.2269 -2.2409 Tf
(host) Tx 
(\r) TX 
TO
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
